import semlang.v0.float64
import semlang.v0.integer

// Type nicknames
define double as float64

module sampleMath {

  function square(number: double): double {
    number * number 
  }

  function pythagoras(a: float64, b: float64) {
    // This is a nicer way to have "return if () {} else {}" but we might leave to a dialect
    return float64.NaN if a.equals(float64.NaN) | b.equals(float64.NaN)
    // Type restrictions are non-essential for v0
    // Note use of "generator" functions for constants
    // float64.0 could also be written as float64."0" or float64.generator("0")
    let aSquared: float64 = a.times(a)
    let bSquared: float64 = b.times(b)
    let sumOfSquares: float64 = aSquared.plus(bSquared)
    return float64.squareRoot(sumOfSquares) // return is optional
  }

  function fibonacci(number: natural): integer {
    let fibonacci[n: natural] = {
      (n == natural.0) => { integer.0 },
      (n == natural.1) => { integer.1 },
      (n > natural.1) => { fibonacci[n - 2] + fibonacci[n - 1] }
    }
    fibonacci[number]
  }

  struct integer.point2D {
    x: integer
    y: integer
  }
  
  //TODO: Include generic structs/types
}
