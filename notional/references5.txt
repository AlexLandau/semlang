Some thoughts about references from where the last bit left off (a while ago, chronologically):

I've had some ideas about "isolated references" vs. "shared references". The idea is that if
a reference is isolated, then modifications to it (or observations of it; assume "modifications"
include that in this discussion) can't affect or be affected by modifications to some other
isolated reference, except insofar as information is travelling through the code.

// & designates an argument as an "isolated reference"
function foo(left: &MutableList<Integer>, right: &MutableList<Integer>) {
  // These two statements can be reordered by the runtime
  left.add(1)
  right.add(2)
  // The next two have an ordering imposed by the structure of the code
  let first = left.get(0)
  right.add(first)
}
// && designates an argument as a "shared reference"
function foo2(left: &&MutableList<Integer>, right: &&MutableList<Integer>) {
  // These cannot be reordered; left and right could be the same list
  left.add(1)
  right.add(1)
}

These also affect how these can be "consumed":

function bar(left: &ML<Int>, right: &ML<Int>): &MutableList<Integer> {
  // ERROR: This could result in multiple "isolated" references to this list in the calling code
  // (still an error if the return type is &&)
  return left
}
function bar2(left: &&ML<Int>, right: &&ML<Int>): &&ML<Int> {
  // This is fine
  return left
}
// &* marks a "consuming reference"
function bar3(left: &*ML<Int>, right: &ML<Int>): &ML<Int> {
  // This is fine; the caller can now only use the result, not the reference from "left"
  return left
}

Consuming references are also how structs and unions may be able to have isolated references as
members:

struct MyFoo {
  list: &MutableList<Integer>
}
// The constructor of MyFoo has the signature (&*MutableList<Integer>) -> MyFoo
union MyBar {
  Left: &MutableList<Integer>
  Right
}
// MyBar.Left has the signature (&*MutableList<Integer>) -> MyBar

There may also be reason to have a middle ground, with reference groups:

function baz(f1: &[groupId]Foo, f2: &[groupId]Foo, f3: &Foo) { ... }

Shared references would be used by anything touching the outside world, namely I/O. This means
disk accesses and console output/input and the like would be implicitly serialized, unless other
reference types were used to introduce non-determinism to decouple them.

One other thing to mention is that this was annoying:

// Not allowed according to current semantics
n.= n[] + 1
// Translates as:
Var.set(n, Integer.plus(Var.get(n), Integer."1"))

This is because we disallowed multiple "referential actions" in one statement, to avoid
ambiguities over their ordering.

The semantics suggested above about isolated references mean this would already be solved if
two different (and independent) variables were involved: we could do as many actions as we
wanted if each one involved a separate independent variable.

But even in this case, there shouldn't really be ambiguity, because the get must happen before
the set. I believe the obvious way to exclude this case is: If a referential action is getting
its reference as a direct variable in one argument, and the other referential action is another
argument of that action, then the ordering is unambiguous.

// Ambiguous
foo(bar(n), bar(n))
// Unambiguous
foo(n, bar(n))

So, let's puzzle over the details of structs, unions, and function bindings a little more.
Again, the semantic intent should be pretty clear: A type that is & affects only itself when
used, while a type that is && can affect other && things. If we pass two & things to two different
function calls, the runtime can run them in either order or in parallel; if we pass two && things
to two different functions, the order must be strictly defined by the code and that order must
be obeyed by the runtime. A pair of & arguments to a function must be different things, while
a pair of && arguments may be the same thing. And so on.

Structs: The more obvious case is that we can have a &&MyStruct that contains && members. We
can freely access those members as && types. It cannot contain & members, as the struct itself
could end up with two different aliases, which would provide two different ways to alias the
isolated reference.

What about a &MyStruct? Having members that are values should be fine (to be clear: these still
cannot be edited after construction). Accessing myStruct->integer wouldn't be different from
using a function with type (&MyStruct) -> Integer. What about & members? Let's use an example:

struct ListPair {
  first: &MList<Integer>
  second: &MList<Integer>
}

let myPair: &ListPair = ListPair(first, second) // Function signature is (&*MList<Int>, &*MList<Int>) -> &ListPair
// getCountsDiff has signature (&ListPair) -> Integer
let countsDiff = getCountsDiff(myPair) // Fine so far

// What does that implementation look like, actually using the struct?
function getCountsDiff(pair: &ListPair): Integer {
  // Using variables naively might look like this:
  let firstList = pair->first
  let firstCount = List.size(firstList)
  let secondList = pair->second
  let secondCount = List.size(secondList)
  Integer.subtract(secondCount, firstCount)
  // That's something of a problem because we have multiple aliases here for each list. And
  // we can't just disable access to the whole struct after using pair -- though it might be
  // possible to suppress access to just the one field (but probably over-complicated and not
  // worth it). Or, dialects might allow the user to define a variable that gets replaced by
  // the follow statement before sem1 validation.

  // The following approach, by contrast, should work and be acceptable:
  let firstCount = List.size(pair->first)
  let secondCount = List.size(pair->second)
  Integer.subtract(secondCount, firstCount)

  // But now we have an interesting third implementation:
  Integer.subtract(List.size(pair->first), List.size(pair->second))
}

Right now, this is seen as breaking the "unambiguous ordering" rules for references (in
which calls affecting references need to be put in separate statements). And if we
consider the following similar case:

Integer.subtract(List.size(unknownFn1(pair)), List.size(unknownFn2(pair)))

... obviously we need special knowledge that 1) the "pair" is not getting modified by
those functions, and 2) the outputs of the two are isolated from one another. So
we need to know that all the bits of the pair "in use" in this statement are different
 nodes on the struct "tree", none of which contain one another.

Allowed: f(struct.a, struct.b, struct.c)
Not allowed: f(struct.a, struct.a)
Allowed: f(struct.justAValue, struct.justAValue)
Allowed: f(struct.a, struct.b.y, struct.b.z)
Not allowed: f(struct.a, struct.a.y, struct.b.z)
Not allowed: f(struct, struct.a, struct.b)

This may be just an acceptable special case. Or maybe we go back to the idea of having
a destructuring construct that either suppresses or consumes the original alias. (Worth throwing
into the mix here, since it would be affected, is the idea of auto-generating getter functions
for structs for the purposes of function references. This is the first case implying they'd
work differently from a flat -> operator.)

In any case... we can't allow && members in & structs, because it leaks relationships between
what's supposed to be an isolated & struct and outside factors. This maybe reduces the urgency
of implementing & structs.

Not yet mentioned... it should be permissible to turn a & reference into a && reference.
Obviously, this needs some restrictions (e.g. you can't do it in a function where the & reference
was a non-consuming argument).