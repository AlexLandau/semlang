// TODO: This is motivational for now, but at some point I'll move the actual implementation to be sem2
@Test(["0"], "0")
@Test(["1"], "1")
@Test(["9"], "9")
@Test(["10"], "10")
@Test(["42"], "42")
@Test(["12345"], "12345")
function Natural.toString(value: Natural): String {
  // TODO: Syntactic sugar for while loops
  let curValue = Var(value)
  let codePointsBackwardsBuilder = ListBuilder<CodePoint>()
  Boolean.while(() -> { curValue.get() > Natural."0" }, () -> {
    let remainder = curValue.get().modulo(Natural."10").assume()
    let divided = Natural.dividedBy(curValue.get(), Natural."10").assume()
    let codePoint = CodePoint(remainder + unicodeZero().natural).assume()
    codePointsBackwardsBuilder.append(codePoint)
    curValue.= divided
  })
//  let sequence = Sequence(Natural.toString.State(value, []<CodePoint>), (state: Natural.toString.State) -> {
//    let remainder = state.n.modulo(Natural."10").assume()
//    let divided = Natural.dividedBy(state.n, Natural."10").assume()
//    let codePoint = CodePoint(remainder + unicodeZero().natural).assume()
//    let newCodePoints = state.codePoints.appendFront(codePoint)
//    Natural.toString.State(divided, newCodePoints)
//  })
//  let finishedState = sequence.first((state: Natural.toString.State) -> {
//    state.n == Natural."0"
//  })
  let codePointsBackwards = codePointsBackwardsBuilder.build()
  if (codePointsBackwards.isEmpty()) {
    "0"
  } else {
    String(codePointsBackwards.reverse())
  }
}

//struct Natural.toString.State {
//  n: Natural
//  codePoints: List<CodePoint>
//}

function unicodeZero(): CodePoint {
  CodePoint."48"
}

function Natural.modulo(left: Natural, right: Natural): Maybe<Natural> {
  let moduloResult: Maybe<Integer> = left.integer.modulo(right)
  moduloResult.flatMap(Natural)
}

function Natural.dividedBy(left: Natural, right: Natural): Maybe<Natural> {
  let divisionResult: Maybe<Integer> = left.integer.dividedBy(right)
  divisionResult.flatMap(Natural)
}

function Natural.plus(left: Natural, right: Natural): Natural {
  Natural(left.integer + right.integer).assume()
}

function Natural.equals(left: Natural, right: Natural): Boolean {
  Integer.equals(left, right)
}

function Natural.greaterThan(left: Natural, right: Natural): Boolean {
  Integer.greaterThan(left, right)
}

function List.isEmpty<T>(list: List<T>): Boolean {
  list.size() == Natural."0"
}

// TODO: Also put in the standard library
// TODO: Also consider a ListLike version for the "replace all the methods" implementation?
function List.reverse<T>(list: List<T>): List<T> {
  let newList = ListBuilder<T>()
  let index = Var<Integer>(Integer.minus(list.size(), Integer."1"))
  Boolean.while (() -> { index.get() > Integer."-1" }, () -> {
    let curItem = list.get(Natural(index.get()).assume()).assume()
    newList.append(curItem)
    let nextIndex = Integer.minus(index.get(), Integer."1")
    index.= nextIndex
  })
  newList.build()
}
