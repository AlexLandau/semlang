
@Export
struct Byte {
  natural: Natural
  requires {
    Natural.lessThan(natural, Natural."256")
  }
}

@Export
struct ByteBits {
  bitsBigEndian: BitsBigEndian
  requires {
    Natural.equals(Natural."8", List.size<Bit>(bitsBigEndian->bits))
  }
}

@Export
struct Byte.BitPosition {
  natural: Natural
  requires {
    Natural.lessThan(natural, Natural."8")
  }
}

@Export
function Byte.toBits(byte: Byte): ByteBits {
  let bits = Maybe.assume<BitsBigEndian>(Natural.toNBits(byte->natural, Natural."8"))
  Maybe.assume<ByteBits>(ByteBits(bits))
}

@Export
function ByteBits.get(bits: ByteBits, bitPosition: Byte.BitPosition): Bit {
  Maybe.assume<Bit>(List.get<Bit>(bits->bitsBigEndian->bits, bitPosition->natural))
}
