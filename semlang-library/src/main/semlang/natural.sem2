@Export
function Natural.plus(left: Natural, right: Natural): Natural {
  Maybe.assume(Natural(Integer.plus(left->integer, right->integer)))
}

@Export
function Natural.minus(left: Natural, right: Natural): Integer {
  Integer.minus(left->integer, right->integer)
}

@Export
function Natural.times(left: Natural, right: Natural): Natural {
  Maybe.assume(Natural(Integer.times(left->integer, right->integer)))
}

@Export
function Natural.dividedBy(left: Natural, right: Natural): Maybe<Natural> {
  let divisionResult: Maybe<Integer> = Integer.dividedBy(left->integer, right->integer)
  Maybe.flatMap(divisionResult, Natural|(_))
}

@Export
function Natural.modulo(left: Natural, right: Natural): Maybe<Natural> {
  let moduloResult: Maybe<Integer> = Integer.modulo(left->integer, right->integer)
  Maybe.flatMap(moduloResult, Natural|(_))
}

@Export
function Natural.equals(left: Natural, right: Natural): Boolean {
  Integer.equals(left->integer, right->integer)
}

@Export
function Natural.notEquals(left: Natural, right: Natural): Boolean {
  Boolean.not(Integer.equals(left->integer, right->integer))
}

@Export
function Natural.lessThan(left: Natural, right: Natural): Boolean {
  Integer.lessThan(left->integer, right->integer)
}

@Export
function Natural.greaterThan(left: Natural, right: Natural): Boolean {
  Integer.greaterThan(left->integer, right->integer)
}

@Export
function Natural.isBetweenInclusive(toCheck: Natural, lowerBound: Natural, upperBound: Natural): Boolean {
  Boolean.and(
    Natural.lessThanOrEqualTo(lowerBound, toCheck),
    Natural.lessThanOrEqualTo(toCheck, upperBound)
  )
}

@Export
function Natural.lessThanOrEqualTo(left: Natural, right: Natural): Boolean {
  if (Natural.lessThan(left, right)) {
    Boolean."true"
  } else {
    Natural.equals(left, right)
  }
}

@Export
function Natural.lesser(left: Natural, right: Natural): Natural {
  if (Natural.lessThan(left, right)) {
    left
  } else {
    right
  }
}

@Export
function Natural.greater(left: Natural, right: Natural): Natural {
  if (Natural.greaterThan(left, right)) {
    left
  } else {
    right
  }
}

@Export
function Natural.max(naturals: List<Natural>): Maybe<Natural> {
  let firstValueMaybe = List.first(naturals)
  Maybe.map(firstValueMaybe, function(firstValue: Natural): Natural {
    List.reduce(naturals, firstValue, Natural.greater|(_, _))
  })
}

@Export
function Natural.absoluteDifference(left: Natural, right: Natural): Natural {
  let difference = Integer.minus(left->integer, right->integer)
  Natural.absoluteValue(difference)
}

@Export
function Natural.absoluteValue(integer: Integer): Natural {
  let integerValue = if (Integer.lessThan(integer, Integer."0")) {
    Integer.minus(Integer."0", integer)
  } else {
    integer
  }
  Maybe.assume(Natural(integerValue))
}

@Export
function Natural.toNBits(value: Natural, numBits: Natural): Maybe<BitsBigEndian> {
  let allBits = if (Natural.equals(value, Natural."0")) {
    []<Bit>
  } else {
    Natural.toBits(value)->bits
  }
  let actualNumBits = List.size(allBits)
  let paddingNeededMaybe = Natural(Natural.minus(numBits, actualNumBits))
  Maybe.map(paddingNeededMaybe, function(paddingNeeded: Natural): BitsBigEndian {
    let padding = List.nCopies(paddingNeeded, Bit."0")
    // TODO: Infer list types, particularly in cases like this
    BitsBigEndian(List.concatenate([padding, allBits]<List<Bit>>))
  })
}

// TODO: You really want this to be done natively...
@Export
function Natural.toBits(value: Natural): BitsBigEndian {
  if (Natural.equals(value, Natural."0")) {
    BitsBigEndian([Bit."0"]<Bit>)
  } else {
    BitsBigEndian(Natural.toBitsList(value))
  }
}
function Natural.toBitsList(value: Natural): List<Bit> {
  // TODO: This can probably be done better/non-recursively
  if (Natural.equals(value, Natural."0")) {
    []<Bit>
  } else {
    let listWithoutLastBit = Natural.toBitsList(Maybe.assume(Natural.dividedBy(value, Natural."2")))
    let curBit = Maybe.assume(Bit(Maybe.assume(Natural.modulo(value, Natural."2"))))
    List.append(listWithoutLastBit, curBit)
  }
}

// TODO: You really want this to be done natively...
@Export
function Natural.fromBits(bitsBigEndian: BitsBigEndian): Natural {
  List.reduce(bitsBigEndian->bits, Natural."0", function(valueSoFar: Natural, bit: Bit): Natural {
    let doubledValue = Natural.times(valueSoFar, Natural."2")
    Natural.plus(doubledValue, bit->natural)
  })
}

// TODO: Move this somewhere appropriate?
@Export
function Natural.sum(numbers: List<Natural>): Natural {
  List.reduce(numbers, Natural."0", Natural.plus|(_, _))
}

@Export
function Natural.rangeInclusive(start: Natural, end: Natural): List<Natural> {
  let numberOfValuesMaybe = Natural(Natural.minus(Natural.plus(end, Natural."1"), start))
  let rangeMaybe = Maybe.map(numberOfValuesMaybe, function(numValues: Natural): List<Natural> {
    Sequence.getRange(Natural.arithmeticProgression(start, Natural."1"), numValues)
  })
  Maybe.orElse(rangeMaybe, []<Natural>)
}

@Export
function Natural.sequence(): Sequence<Natural> {
  Sequence(Natural."0", Natural.plus|(_, Natural."1"))
}

@Export
function Natural.arithmeticProgression(initialValue: Natural, increment: Natural): Sequence<Natural> {
  Sequence(initialValue, Natural.plus|(_, increment))
}

struct Natural.toString.State {
  n: Natural
  codePoints: List<CodePoint>
}

@Export
function Natural.toString(value: Natural): String {
  let curValue = Var(value)
  let codePointsBackwardsBuilder = ListBuilder<CodePoint>()
  while (curValue[] > Natural."0") {
    let remainder = curValue[].modulo(Natural."10").assume()
    let divided = Natural.dividedBy(curValue[], Natural."10").assume()
    let codePoint = CodePoint(remainder + unicodeZero().natural).assume()
    codePointsBackwardsBuilder.append(codePoint)
    curValue.= divided
  }
  let codePointsBackwards = codePointsBackwardsBuilder.build()
  if (codePointsBackwards.isEmpty()) {
    "0"
  } else {
    String(codePointsBackwards.reversed())
  }
}

function unicodeZero(): CodePoint {
  CodePoint."48"
}

@Export
function Natural.parse(string: String): Maybe<Natural> {
  let n = Var(Natural."0")
  let index = Var(Natural."0")
  while (index[] < string.length()) {
    // TODO: Add String.get()
    let differenceFromZero = Natural.minus(string.codePoints[index[]].assume(), unicodeZero())
    // TODO: Add || operator
    if (Boolean.or(differenceFromZero < 0, differenceFromZero > 9)) {
      // TODO: Add returns to sem2 (and if-blocks without elses, which should be in sem1 now as well...)
      // Maybe.failure()
    }
    // TODO: Let these be on the same line
    // TODO: index[] + Natural."1" doesn't work here
    let nextIndex = Natural.plus(index[], Natural."1")
    index.= nextIndex
  }
  Void()
  // let firstCodePointMaybe = List.get(string->codePoints, Natural."0")
  // Maybe.flatMap(firstCodePointMaybe, function (firstCodePoint: Unicode.CodePoint): Maybe<Natural> {
  //   if (Unicode.CodePoint.equals(firstCodePoint, Unicode.String."0")) {
      
  //   }
  // })
}
