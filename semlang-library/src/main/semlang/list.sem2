
@Export
function List.isEmpty<T>(list: List<T>): Boolean {
  list.size() == Natural."0"
}

@Export
function List.first<T>(list: List<T>): Maybe<T> {
  list[Natural."0"]
}

@Export
function List.last<T>(list: List<T>): Maybe<T> {
  let lastIndexMaybe: Maybe<Natural> = Natural(list.size() - Natural."1")
  lastIndexMaybe.flatMap({ lastIndex: Natural ->
    list[lastIndex]
  })
}

@Export
function List.nCopies<T>(n: Natural, value: T): List<T> {
  // TODO: This should probably be done with a ListBuilder
  let builder = ListBuilder<T>()
  let count = Var(Natural."0")
  while (count[] < n) {
    builder.append(value)
    let nextCount = count[] + Natural."1"
    count.= nextCount
  }
  builder.build()
}

@Export
function List.drop<T>(list: List<T>, n: Natural): List<T> {
  let end = list.size()
  let start = Natural.lesser(n, end)
  list.subList(start, end).assume()
}

@Export
function List.dropLast<T>(list: List<T>, n: Natural): List<T> {
  let endMaybe = Natural(list.size() - n)
  let end = endMaybe.orElse(Natural."0")
  list.subList(Natural."0", end).assume()
}

@Export
function List.firstN<T>(list: List<T>, n: Natural): List<T> {
  let end = Natural.lesser(n, list.size())
  list.subList(Natural."0", end).assume()
}

@Export
function List.lastN<T>(list: List<T>, n: Natural): List<T> {
  let size = list.size()
  let startMaybe = Natural(size - n)
  let start = startMaybe.orElse(Natural."0")
  list.subList(start, size).assume()
}

@Export
function List.interpose<T>(list: List<T>, interposer: T): List<T> {
  if (list.isEmpty()) {
    []<T>
  } else {
    let listWithExtraTrailingItem = list.flatMap({ item: T ->
      [item, interposer]<T>
    })
    listWithExtraTrailingItem.dropLast(Natural."1")
  }
}

@Export
function List.getIndices<T>(list: List<T>): List<Natural> {
  let size = list.size()
  if (size == Natural."0") {
    []<Natural>
  } else {
    let lastIndex = Natural(size - Natural."1").assume()
    Natural.rangeInclusive(Natural."0", lastIndex)
  }
}

// TODO: Consider exporting some version of this
function List.getItemsSequence<T>(list: List<T>): Sequence<Maybe<IndexedItem<T>>> {
  let firstItemMaybe = list[Natural."0"]
  let firstIndexedItem = firstItemMaybe.map({ item: T -> IndexedItem(Natural."0", item) })
  Sequence(firstIndexedItem, function (lastIndexedItemMaybe: Maybe<IndexedItem<T>>): Maybe<IndexedItem<T>> {
    Maybe.flatMap(lastIndexedItemMaybe, function (lastIndexedItem: IndexedItem<T>): Maybe<IndexedItem<T>> {
      let lastIndex = lastIndexedItem->index
      let curIndex = Natural.plus(lastIndex, Natural."1")
      let itemMaybe = List.get(list, curIndex)
      Maybe.map(itemMaybe, IndexedItem<T>|(curIndex, _))
    })
  })
}

@Export
struct IndexedItem<T> {
  index: Natural
  item: T
}

@Export
function List.firstWith<T>(list: List<T>, predicate: (T) -> Boolean): Maybe<IndexedItem<T>> {
  // There are currently no mechanisms to return from within a for or while loop, which would be the natural way to write this
  list.getItemsSequence().first({ indexedItemMaybe: Maybe<IndexedItem<T>> ->
    if (indexedItemMaybe.isSuccess()) {
      predicate(indexedItemMaybe.assume().item)
    } else {
      // End the search by returning true
      Boolean."true"
    }
  })
}

@Export
function List.firstIndexOf<T: Data>(list: List<T>, object: T): Maybe<Natural> {
  Maybe.map(
    list.firstWith(Data.equals|(object, _)),
    // TODO: Function reference for follows
    { indexedItem: IndexedItem<T> ->
      indexedItem.index
    }
  )
}
