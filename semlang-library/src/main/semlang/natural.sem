
function Natural.sequence(): Sequence<Natural> {
    return Sequence.create<Natural>(Natural."0", Natural.plus|(_, Natural."1"))
}

// TODO: Should go in a standard library
function Natural.arithmeticProgression(initialValue: Natural, increment: Natural): Sequence<Natural> {
    // TODO: Re-inline
    let allNaturalsSequence: Sequence<Natural> = Natural.sequence()
    return Sequence.map<Natural, Natural>(allNaturalsSequence, Natural.internal.plusProduct|(initialValue, increment, _))
}
function Natural.internal.plusProduct(a: Natural, b: Natural, c: Natural): Natural {
    return Natural.plus(a, Natural.times(b, c))
}
