
// This could make an interesting test case for seeing if functions written to work on list-based
// types can be automatically converted to work on streams instead.

struct Utf8.CodePointByteCount {
  integer: Integer
  requires {
    integer > 0
    && integer < 5
  }
}

union Utf8.CodePointBytes {
  OneByte: Utf8.OneByteCodePoint
  TwoByte: Utf8.TwoByteCodePoint
  ThreeByte: Utf8.ThreeByteCodePoint
  FourByte: Utf8.FourByteCodePoint
}

struct Utf8.OneByteCodePoint {
  bytes: List<Byte>
  requires {
    Utf8.isValidOneByteCodePoint(bytes)
  }
}

struct Utf8.TwoByteCodePoint {
  bytes: List<Byte>
  requires {
    Utf8.isValidTwoByteCodePoint(bytes)
  }
}

struct Utf8.ThreeByteCodePoint {
  bytes: List<Byte>
  requires {
    Utf8.isValidThreeByteCodePoint(bytes)
  }
}

struct Utf8.FourByteCodePoint {
  bytes: List<Byte>
  requires {
    Utf8.isValidFourByteCodePoint(bytes)
  }
}

// TODO: It would be broadly useful to be able to auto-generate this kind of thing when requested
// (i.e. "every type in the union has a field with name x, they're all the same type, generate a
// function to get it from the union type directly" -- not autodetected, but requested as part of
// the union type in sem2)
function Utf8.CodePointBytes.getBytes(bytes: Utf8.CodePointBytes): List<Byte> {
  Utf8.CodePointBytes.when(
    bytes,
    function (oneByte: Utf8.OneByteCodePoint): List<Byte> { oneByte->bytes },
    function (twoByte: Utf8.TwoByteCodePoint): List<Byte> { twoByte->bytes },
    function (threeByte: Utf8.ThreeByteCodePoint): List<Byte> { threeByte->bytes },
    function (fourByte: Utf8.FourByteCodePoint): List<Byte> { fourByte->bytes },
  )
}

function Utf8.getStartingCodePointBytes(bytes: List<Byte>): Maybe<Utf8.CodePointBytes> {
  let lengthOneList = bytes.firstN(Natural."1")
  let sizeOneCodePoint = Utf8.OneByteCodePoint(lengthOneList)
  if (sizeOneCodePoint.isSuccess()) {
    sizeOneCodePoint.map(Utf8.CodePointBytes.OneByte)
  } else {
    let lengthTwoList = bytes.firstN(Natural."2")
    let sizeTwoCodePoint = Utf8.TwoByteCodePoint(lengthTwoList)
    if (sizeTwoCodePoint.isSuccess()) {
      sizeTwoCodePoint.map(Utf8.CodePointBytes.TwoByte)
    } else {
      let lengthThreeList = bytes.firstN(Natural."3")
      let sizeThreeCodePoint = Utf8.ThreeByteCodePoint(lengthThreeList)
      if (sizeThreeCodePoint.isSuccess()) {
        sizeThreeCodePoint.map(Utf8.CodePointBytes.ThreeByte)
      } else {
        let lengthFourList = bytes.firstN(Natural."4")
        let sizeFourCodePoint = Utf8.FourByteCodePoint(lengthFourList)
        sizeFourCodePoint.map(Utf8.CodePointBytes.FourByte)
      }
    }
  }
}

function Utf8.isValidOneByteCodePoint(bytes: List<Byte>): Boolean {
  if (bytes.size() == Natural."1") {
    let byte = bytes[Natural."0"].assume()
    let byteBits = byte.toBits()
    // TODO: Good test base for being able to infer types of literals; should just be byteBits[0]
    // TODO: Gets should have higher precedence than equality (== not working here)
    Bit."0" == byteBits[Byte.BitPosition."0"]
  } else {
    Boolean."false"
  }
}

function Utf8.isValidTwoByteCodePoint(bytes: List<Byte>): Boolean {
  if (bytes.size() == Natural."2") {
    let byte1 = bytes[Natural."0"].assume()
    let byte2 = bytes[Natural."1"].assume()
    let byteBits1 = byte1.toBits()
    let byteBits2 = byte2.toBits()
    Boolean.all([
      Bit."1" == byteBits1[Byte.BitPosition."0"],
      Bit."1" == byteBits1[Byte.BitPosition."1"],
      Bit."0" == byteBits1[Byte.BitPosition."2"],
      Bit."1" == byteBits2[Byte.BitPosition."0"],
      Bit."0" == byteBits2[Byte.BitPosition."1"],
    ]<Boolean>)
  } else {
    Boolean."false"
  }
}

function Utf8.isValidThreeByteCodePoint(bytes: List<Byte>): Boolean {
  if (bytes.size() == Natural."3") {
    let byte1 = bytes[Natural."0"].assume()
    let byte2 = bytes[Natural."1"].assume()
    let byte3 = bytes[Natural."2"].assume()
    let byteBits1 = byte1.toBits()
    let byteBits2 = byte2.toBits()
    let byteBits3 = byte3.toBits()
    Boolean.all([
      Bit."1" == byteBits1[Byte.BitPosition."0"],
      Bit."1" == byteBits1[Byte.BitPosition."1"],
      Bit."1" == byteBits1[Byte.BitPosition."2"],
      Bit."0" == byteBits1[Byte.BitPosition."3"],
      Bit."1" == byteBits2[Byte.BitPosition."0"],
      Bit."0" == byteBits2[Byte.BitPosition."1"],
      Bit."1" == byteBits3[Byte.BitPosition."0"],
      Bit."0" == byteBits3[Byte.BitPosition."1"],
    ]<Boolean>)
  } else {
    Boolean."false"
  }
}

function Utf8.isValidFourByteCodePoint(bytes: List<Byte>): Boolean {
  if (bytes.size() == Natural."4") {
    let byte1 = bytes[Natural."0"].assume()
    let byte2 = bytes[Natural."1"].assume()
    let byte3 = bytes[Natural."2"].assume()
    let byte4 = bytes[Natural."3"].assume()
    let byteBits1 = byte1.toBits()
    let byteBits2 = byte2.toBits()
    let byteBits3 = byte3.toBits()
    let byteBits4 = byte4.toBits()
    Boolean.all([
      Bit."1" == byteBits1[Byte.BitPosition."0"],
      Bit."1" == byteBits1[Byte.BitPosition."1"],
      Bit."1" == byteBits1[Byte.BitPosition."2"],
      Bit."1" == byteBits1[Byte.BitPosition."3"],
      Bit."0" == byteBits1[Byte.BitPosition."4"],
      Bit."1" == byteBits2[Byte.BitPosition."0"],
      Bit."0" == byteBits2[Byte.BitPosition."1"],
      Bit."1" == byteBits3[Byte.BitPosition."0"],
      Bit."0" == byteBits3[Byte.BitPosition."1"],
      Bit."1" == byteBits4[Byte.BitPosition."0"],
      Bit."0" == byteBits4[Byte.BitPosition."1"],
    ]<Boolean>)
  } else {
    Boolean."false"
  }
}

function getByteCountGivenInitialByte(initialByte: Byte): Maybe<Utf8.CodePointByteCount> {
  let bits = initialByte.toBits()
  if (Bit."0" == bits[Byte.BitPosition."0"]) {
    Maybe.success(Utf8.CodePointByteCount."1")
  } else {
    Maybe.failure<Utf8.CodePointByteCount>()
  }
}

function getUnicodeValue(codePointBytes: Utf8.CodePointBytes): CodePoint {
  let bytes = codePointBytes.getBytes()
  let length = bytes.size()
  let byte1 = bytes[Natural."0"].assume()
  Maybe.assume(
    if (length == Natural."1") {
      CodePoint(byte1.natural)
    } else {
      let byte2 = bytes[Natural."1"].assume()
      let byteTwoContents = Natural(byte2->natural - Natural."128").assume()
      if (length == Natural."2") {
        let byteOneContents = Natural(byte1->natural - Natural."192").assume()
        let byteOneContribution = byteOneContents * Natural."64"
        let byteTwoContribution = byteTwoContents
        CodePoint(byteOneContribution + byteTwoContribution)
      } else {
        let byte3 = bytes[Natural."2"].assume()
        let byteThreeContents = Natural(byte3->natural - Natural."128").assume()
        if (length == Natural."3") {
          let byteOneContents = Natural(byte1->natural - Natural."224").assume()
          let byteOneContribution = byteOneContents * Natural."4096"
          let byteTwoContribution = byteTwoContents * Natural."64"
          let byteThreeContribution = byteThreeContents
          let numericValue = byteOneContribution + byteTwoContribution + byteThreeContribution
          CodePoint(numericValue)
        } else {
          // Length is 4
          let byte4 = bytes[Natural."3"].assume()
          let byteFourContents = Natural(byte4->natural - Natural."128").assume()

          let byteOneContents = Natural(byte1->natural - Natural."240").assume()
          let byteOneContribution = byteOneContents * Natural."262144"
          let byteTwoContribution = byteTwoContents * Natural."4096"
          let byteThreeContribution = byteThreeContents * Natural."64"
          let byteFourContribution = byteFourContents
          
          let numericValue = byteOneContribution + byteTwoContribution + byteThreeContribution + byteFourContribution
          CodePoint(numericValue)
        }
      }
    }
  )
}

/* This version of the function requires the bytes given to correspond exactly to a complete
 * string. If any part of the bytes are invalid, failure will be returned.
 *
 * TODO: This is not actually as strict as desired yet. Disallow overlong encodings, invalid code points,
 * etc. Also add a less-strict parser.
 */
// First implementation is silly recursive approach, just to work out the Byte functions needed.
@Export
function Utf8.decodeStrict1(bytes: List<Byte>): Maybe<String> {
  if (bytes.size() == Natural."0") {
    Maybe.success(String."")
  } else {
    let firstCharMaybe = Utf8.getStartingCodePointBytes(bytes)
    Maybe.flatMap(firstCharMaybe, { firstChar: Utf8.CodePointBytes ->
      let unicodeValue = getUnicodeValue(firstChar)
      let firstCharBytes = firstChar.getBytes()
      let numBytesUsed = firstCharBytes.size()
      let remainingBytes = bytes.drop(numBytesUsed)
      Maybe.map(Utf8.decodeStrict1(remainingBytes), { remainingString: String ->
        remainingString.appendFront(unicodeValue)
      })
    })

    // TODO: Convert to the newer bytes-to-bits approach
    // let firstByte = Maybe.assume<Byte>(List.get<Byte>(bytes, Natural."0"))
    // let firstByteBits = Byte.toBits(firstByte)
    // let 128bit = Byte.BitPosition."7"
    // if (Bit.equals(Bit."0", ByteBits.get(firstByteBits, Byte.BitPosition."0"))) {
    //   let firstChar = Maybe.assume<CodePoint>(CodePoint(firstByte->natural))
    //   let remainingBytes = List.drop<Byte>(bytes, Natural."1")
    //   Maybe.map<String, String>(Utf8.decodeStrict1(remainingBytes),
    //     function(remainingString: String): String {
    //       let allChars = List.appendFront<CodePoint>(firstChar, remainingString->codePoints)
    //       String(allChars)
    //     }
    //   )
    // } else {
    //   let 64bit = Byte.BitPosition."6"
    //   let 32bit = Byte.BitPosition."5"
    //   if (Boolean.and(
    //     Bit.equals(Bit."1", ByteBits.get(firstByteBits, Byte.BitPosition."1")),
    //     Bit.equals(Bit."0", ByteBits.get(firstByteBits, Byte.BitPosition."2")),
    //   )) {
    //     // TODO: Check that we are not the last byte, and that the second byte begins with bits "10"
    //     let secondByte = Maybe.assume<Byte>(List.get<Byte>(bytes, Natural."1")) // TODO: Fix assumption
    //     let secondByteBits = Byte.toBits(secondByte)
    //     let fullBits = BitsBigEndian(List.concatenate<Bit>(
    //       List.lastN<Bit>(firstByteBits->bitsBigEndian->bits, Natural."5"),
    //       List.lastN<Bit>(secondByteBits->bitsBigEndian->bits, Natural."6")
    //     ))
    //     let codePointValue = Natural.fromBits(fullBits)
    //     let firstChar = Maybe.assume<CodePoint>(CodePoint(codePointValue))
    //     let remainingBytes = List.drop<Byte>(bytes, Natural."2")
    //     Maybe.map<String, String>(Utf8.decodeStrict1(remainingBytes),
    //       function(remainingString: String): String {
    //         let allChars = List.appendFront<CodePoint>(firstChar, remainingString->codePoints)
    //         String(allChars)
    //       }
    //     )
    //   } else {
    //     // TODO: Implement
    //     Maybe.failure<String>()
    //   }
    // }
  }
}
