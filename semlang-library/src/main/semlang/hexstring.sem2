
// Represents a non-negative hex value
@Export
struct HexString {
  string: String
  requires {
    Boolean.not(string.codePoints.isEmpty())
    && Boolean.all(string.codePoints.map(isValidHexCodePoint))
  }
}

function getHexCodePointValue(codePoint: CodePoint): Maybe<Natural> {
    // Number case: 0-9
  if (Natural.isBetweenInclusive(codePoint->natural, 48, 57)) {
    // Note: In these cases, absoluteDifference() should act as minus().
    // Not sure if this is the right permanent solution.
    Maybe.success(Natural.absoluteDifference(codePoint->natural, 48))
  } else {
    // Letter case: a-f (lowercase only)
    if (Natural.isBetweenInclusive(codePoint->natural, 97, 102)) {
      Maybe.success(Natural.absoluteDifference(codePoint->natural, 87))
    } else {
      Maybe.failure<Natural>()
    }
  }
}

function isValidHexCodePoint(codePoint: CodePoint): Boolean {
  Maybe.isSuccess(getHexCodePointValue(codePoint))
}

@Export
function HexString.toValue(hexString: HexString): Natural {
  List.reduce(
    hexString->string->codePoints,
    Natural."0",
    hexStringReduction
  )
}

function hexStringReduction(numberSoFar: Natural, nextCodePoint: CodePoint): Natural {
  let prefixValue = numberSoFar * 16
  let currentDigitValue = getHexCodePointValue(nextCodePoint).assume()
  prefixValue + currentDigitValue
}

