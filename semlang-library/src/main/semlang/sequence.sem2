
// TODO: Figure out a better name
// TODO: Should also have a version with no initial value specified
struct AccumulatingSequenceElement<T> {
    curValue: T
    accumulatedValues: List<T>
}

@Export
struct SequenceLike<T> {
    get: (Natural) -> T
    first: ((T) -> Boolean) -> T
}

function Sequence.asSequenceLike<T>(sequence: Sequence<T>): SequenceLike<T> {
    SequenceLike(
        Sequence.get|(sequence, _),
        Sequence.first|(sequence, _)
    )
}

@Export
function Sequence.createAccumulating<T>(initialValue: T, nextValueFunction: (List<T>) -> T): SequenceLike<T> {
    let accumulatingSequence: Sequence<AccumulatingSequenceElement<T>> = Sequence(
        AccumulatingSequenceElement(initialValue, [initialValue]<T>),
        Sequence.internal.accumulatingSequenceNext|(_, nextValueFunction)
    )
    let accumulatingSequenceLike = Sequence.asSequenceLike(accumulatingSequence)
    SequenceLike.map(accumulatingSequenceLike, Sequence.internal.fromAccumulatingSequenceElement<T>|(_))
}
function Sequence.internal.accumulatingSequenceNext<T>(previous: AccumulatingSequenceElement<T>, nextValueFunction: (List<T>) -> T): AccumulatingSequenceElement<T> {
    let newValue: T = nextValueFunction(previous->accumulatedValues)
    AccumulatingSequenceElement(
        newValue,
        List.append(previous->accumulatedValues, newValue)
    )
}
function Sequence.internal.fromAccumulatingSequenceElement<T>(element: AccumulatingSequenceElement<T>): T {
    element->curValue
}

@Export
function Sequence.getRange<T>(sequence: Sequence<T>, numElements: Natural): List<T> {
  // TODO: Can do something better here
  // TODO: Should we switch Sequence back to a struct and get rid of map()?
  let initialValue = SequenceRangeElement(Natural."0", []<T>)
  let rangeSequence = Sequence(initialValue, function(rangeElement: SequenceRangeElement<T>): SequenceRangeElement<T> {
    let curValue = Sequence.get(sequence, rangeElement->indexToGet)
    let nextIndex = Natural.plus(rangeElement->indexToGet, Natural."1")
    let newValues = List.append(rangeElement->accumulatedValues, curValue)
    SequenceRangeElement(nextIndex, newValues)
  })
  Sequence.get(rangeSequence, numElements)->accumulatedValues
}
struct SequenceRangeElement<T> {
  indexToGet: Natural
  accumulatedValues: List<T>
}

@Export
function SequenceLike.map<T, U>(sequence: SequenceLike<T>, fn: (T) -> U): SequenceLike<U> {
    // This is actually hard to do here...
    // I think we need Sequence to be either a native type or an interface (that does NOT expose getSuccessor())
    // so that the return type of e.g. get() differs from the stored type
    // Sequence<U>(firstVal, successor)

    let mappedSequence: MappedSequence<T, U> = MappedSequence(sequence, fn)

    MappedSequence.getMappedSequenceAdapter<T, U>()(mappedSequence)
}

// TODO: Refactor to eliminate this (vestige of interfaces existing)
function MappedSequence.getMappedSequenceAdapter<T, U>(): (MappedSequence<T, U>) -> SequenceLike<U> {
    let getBinding: (MappedSequence<T, U>, Natural) -> U = MappedSequence.get<T, U>|(_, _)
    let firstBinding: (MappedSequence<T, U>, (U) -> Boolean) -> U = MappedSequence.first<T, U>|(_, _)
    function (mappedSequence: MappedSequence<T, U>): SequenceLike<U> {
        SequenceLike(getBinding|(mappedSequence, _), firstBinding|(mappedSequence, _))
    }
}

function MappedSequence.get<T, U>(sequence: MappedSequence<T, U>, index: Natural): U {
    let preTransformed: T = sequence->sequence->get(index)
    sequence->mapping(preTransformed)
}

function MappedSequence.first<T, U>(sequence: MappedSequence<T, U>, predicate: (U) -> Boolean): U {
    // let preTransformed: T = sequence->sequence->get(predicate)
    // sequence->mapping(preTransformed)
    let postMappedPredicate: (T) -> Boolean = Function.doInOrder(sequence->mapping|(_), predicate|(_))

    let preMappedResult: T = sequence->sequence->first(postMappedPredicate)
    sequence->mapping(preMappedResult)
}

struct MappedSequence<T, U> {
    sequence: SequenceLike<T>
    mapping: (T) -> U
}
