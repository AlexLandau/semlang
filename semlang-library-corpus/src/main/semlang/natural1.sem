@Test(["0", "0"], "0")
@Test(["0", "1"], "1")
@Test(["1", "0"], "1")
@Test(["1", "1"], "2")
@Test(["2", "4"], "6")
@Test(["0", "4294967296"], "4294967296")
@Test(["2147483648", "2147483648"], "4294967296")
@Test(["1000000", "4294967296"], "4295967296")
@Test(["0", "18446744073709551616"], "18446744073709551616")
@Test(["1000000000000000", "18446744073709551616"], "18447744073709551616")
function Natural.plusTest(left: Natural, right: Natural): Natural {
  Natural.plus(left, right)
}

@Test(["0", "0"], "true")
@Test(["0", "1"], "false")
@Test(["1", "0"], "false")
@Test(["1", "1"], "true")
@Test(["2", "4"], "false")
@Test(["0", "4294967296"], "false") //offset of 2^32
@Test(["1000000", "4295967296"], "false") //offset of 2^32
@Test(["0", "18446744073709551616"], "false") //offset of 2^64
@Test(["1000000000000000", "18447744073709551616"], "false") //offset of 2^64
function Natural.equalsTest(left: Natural, right: Natural): Boolean {
  Natural.equals(left, right)
}

@Test(["0"], "0")
@Test(["1"], "1")
@Test(["7"], "7")
function sequenceTest(index: Natural): Natural {
    Sequence.get(Natural.sequence(), index)
}

@Test(["0"], "1")
@Test(["1"], "1")
@Test(["2"], "2")
@Test(["3"], "2")
@Test(["4"], "3")
@Test(["7"], "3")
@Test(["8"], "4")
@Test(["31"], "5")
@Test(["255"], "8")
@Test(["256"], "9")
function toBitsLengthTest(value: Natural): Natural {
  let bits = Natural.toBits(value)
  List.size(bits->bits)
}

@Test(["0", "0"], "success(0)")
@Test(["0", "1"], "success(1)")
@Test(["0", "7"], "success(7)")
@Test(["1", "0"], "failure")
@Test(["1", "1"], "success(1)")
@Test(["1", "8"], "success(8)")
@Test(["255", "8"], "success(8)")
@Test(["256", "8"], "failure")
function toNBitsLengthTest(value: Natural, numBits: Natural): Maybe<Natural> {
  let bits: Maybe<BitsBigEndian> = Natural.toNBits(value, numBits)
  Maybe.map(bits, function(validBits: BitsBigEndian): Natural { List.size(validBits->bits) })
}
