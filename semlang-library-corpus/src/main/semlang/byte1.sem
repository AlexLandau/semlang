
@Test(["0"], ["0"])
@Test(["255"], ["255"])
@Test(["256"], [])
@Test(["511"], [])
function byteTest(i: Natural): Maybe<Natural> {
    let byte: Maybe<Byte> = Byte(i)
    Maybe.map(byte, function(validByte: Byte): Natural { validByte->natural })
}

@Test([], "0")
function byteLiteralTest1(): Byte {
    Byte."0"
}

@Test([], "25")
function byteLiteralTest2(): Byte {
    Byte."25"
}

@Test([], "255")
function byteLiteralTest3(): Byte {
    Byte."255"
}

@Test(["0"], "0")
@Test(["1"], "0")
@Test(["127"], "0")
@Test(["128"], "1")
@Test(["129"], "1")
@Test(["254"], "1")
@Test(["255"], "1")
function Byte.toBitsTest1(byte: Byte): Bit {
  let bits = Byte.toBits(byte)->bitsBigEndian
  Maybe.assume(List.get(bits->bits, Natural."0"))
}

@Test(["0"], "0")
@Test(["1"], "1")
@Test(["127"], "1")
@Test(["128"], "0")
@Test(["129"], "1")
@Test(["254"], "0")
@Test(["255"], "1")
function Byte.toBitsTest2(byte: Byte): Bit {
  let bits = Byte.toBits(byte)->bitsBigEndian
  Maybe.assume(List.get(bits->bits, Natural."7"))
}

@Test(["0"], "0")
@Test(["1"], "0")
@Test(["127"], "0")
@Test(["128"], "1")
@Test(["129"], "1")
@Test(["254"], "1")
@Test(["255"], "1")
function Byte.toBitsTest3(byte: Byte): Bit {
  let bits = Byte.toBits(byte)
  ByteBits.get(bits, Byte.BitPosition."0")
}
