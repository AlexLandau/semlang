struct TwoNaturals {
  left: Natural2
  right: Natural2
}

@Test(["3", "6"], "3")
@Test(["3", "7"], "1")
@Test(["8", "12"], "4")
@Test(["49", "21"], "7")
@Test(["111", "54"], "3")
@Test(["1", "1"], "1")
function myStuff.gcd(n1: Natural2, n2: Natural2): Natural2 {
  let base: TwoNaturals = TwoNaturals(n1, n2)
  let next: (TwoNaturals) -> TwoNaturals = myStuff.nextPair|(_)
  let euclidSeq: Sequence<TwoNaturals> = Sequence.create<TwoNaturals>(base, next)
  euclidSeq->first(TwoNaturals.equal|(_))->left
}

function TwoNaturals.equal(pair: TwoNaturals): Boolean {
  Natural2.equals(pair->left, pair->right)
}

function myStuff.nextPair(pair: TwoNaturals): TwoNaturals {
  let lesser: Natural2 = Natural2.lesser(pair->left, pair->right)
  let absDifference: Natural2 = Natural2.absoluteDifference(pair->left, pair->right)
  TwoNaturals(lesser, absDifference)
}
