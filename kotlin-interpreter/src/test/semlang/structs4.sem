
struct myStuff.Point<T> {
  x: T
  y: T
}

function <T> myStuff.genericFunction(input: myStuff.Point<T>): Integer {
  return Integer."1"
}

function myStuff.myFunction(input: Integer): Integer {
  let 1: Integer = Integer."1"
  let newX: Integer = Integer.plus(input, 1)
  let newY: Integer = Integer.minus(input, 1)
  let object: myStuff.Point<Integer> = myStuff.Point<Integer>(newX, newY)
  let partialOutput: Integer = Integer.times(object->x, object->y)
  let constantFactor: Integer = myStuff.genericFunction<Integer>(object)
  let output: Integer = Integer.times(partialOutput, constantFactor)
  return output
}
