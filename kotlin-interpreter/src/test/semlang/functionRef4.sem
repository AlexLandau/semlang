
function myCode.square(n: Integer): Integer {
  return Integer.times(n, n)
}

function myCode.cube(n: Integer): Integer {
  return Integer.times(n, Integer.times(n, n))
}

function pythagoreanTripleCheck(a: Integer, b: Integer, c: Integer): Boolean {
  let squareIt: (Integer) -> Integer = myCode.square
  return myCode.overlyGeneralFermatCheck<T>(a, b, c, myCode.square, Integer.plus, Integer.equals)
}

function <T> myCode.overlyGeneralFermatCheck(a: T, b: T, c: T, operation: (T) -> T, plus: (T, T) -> T, equals: (T, T) -> Boolean): Boolean {
  let aSquared: T = operation(a)
  let bSquared: T = operation(b)
  let cSquared: T = operation(c)
  let sumOfSquares: T = plus(aSquared, bSquared)
  let result: Boolean = equals(sumOfSquares, cSquared)
  return result
}
