buildscript {
    ext.kotlin_version = '1.2.60'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

repositories {
    mavenCentral()
}

/*
 * Note: We're doing something a little non-standard with our Jacoco configuration to keep our test runs faster when not
 * specifically looking at coverage (which I expect to be infrequent). Normally the jacoco plugin would be applied to
 * each subproject, which would automatically add Jacoco instrumentation to the test tasks. Instead, we want separate
 * test and testWithJacoco tasks, and a single report task across all projects' tests. We do this by applying the jacoco
 * plugin at the root project level only, and manually applying the root project's Jacoco plugin to the subprojects'
 * testWithJacoco tasks to add their instrumentation.
 *
 */
apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.8.2"
}

// Configure the Kotlin-based subprojects
project(":kotlin").subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

        testCompile 'junit:junit:4.12'
    }

    tasks.register('testWithJacoco', Test.class)
    rootProject.jacoco.applyTo(testWithJacoco)
    // Without this line, this will end up in the root project's build directory and conflict with other projects' files
    testWithJacoco.jacoco.destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
}

// Generates a report of the joint coverage
// Note that this won't be run by `./gradlew build` or `./gradlew test`.
tasks.register('jacocoRootReport', JacocoReport.class) {
    def kotlinProjects = project(':kotlin').subprojects
    dependsOn(kotlinProjects.testWithJacoco)

    additionalSourceDirs = files(kotlinProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(kotlinProjects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(kotlinProjects.sourceSets.main.output)

    executionData = files(kotlinProjects.testWithJacoco.jacoco.destinationFile)

    reports {
        html.enabled = true
        xml.enabled = true
    }

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}
