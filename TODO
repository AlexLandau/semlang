- Clean up, organize code and sample Semlang code
- Validator: Write more simple positive tests and negative tests
- Backwards-chaining interpreter; performance testing and output comparisons for forward, backward interpreters
- Finish up static validation TODOs
  - Validate struct member names
  - Validate function argument names
  - Static validation of literal values
  - Make code style more consistent
- Function definitions as tests
- Function types
- Generic types
- List type (index, map, reduce)
- Sequences and "first"
- Additional primitive types (natural, N-bit integers, floating-point numbers, rationals?, strings, characters)
- Enum types
- Real package/module declarations and use, including "import as" (note: "import as" could be a dialect)
- Code writing into Java
- Annotations and multiple function definitions
- Interfaces/instances
- Monads (e.g. start with support for console-out)
- Start to create dialects with simpler syntax, type inference, etc.
- Semlang -> Semlang optimizations, etc.
- Port "code writing into Java" to Semlang

As things are completed:
- Project Euler
- http://benchmarksgame.alioth.debian.org/