Major near-term projects:
- Reference types, console-out support, and application functions
  - Recreate mock tests
  - Support for actually running @Scripts
  - Give TextOut and @Script their own module (also with Script.ExitValue?)
- Build system
  - Let's start by creating a repo where buildSrc depends on hand-built jars...
- Module reexports
- Sem64
  - It would be nice if threaded types were stable first
- Sem2 and Try notation
  - Call functions like they were on the relevant objects (with IDE autocomplete support)
  - Standard operators
  - Consider a return keyword and similar imperative control structures?
    - Vars?
  - It would be nice if threaded types were stable first, but this might be a prereq for usability...
- Finish converting the validator to use fine-grained errors
  - and/or port the validator itself to Semlang?
  - Also run through the existing failValidator tests to find undesired behaviors/errors
- Probably rename Unicode.String to just String (Ascii.String or AsciiString can still come later)
  - Also consider renaming Maybe.assume to just assume? (Or have it be an alternative name?)
  - Consider removing interfaces from the language (maybe keep in sem2?)
  - Consider function -> fun
Not as near-term but on my mind:
- Some kind of proof system?
- Code writing in TypeScript? Other languages?

Cases to get working with "nice" dev tooling:
- Empty struct
- Empty interface
- Empty function definition
- Empty inline function declaration
- Function with no ending expression, only "let"s (also: inline function)
- Union and struct with same name
- Attempt to use follows on a union
- Function declaration without output type (should be type error, not parsing error)

Stuff that feels blocked or hasn't been implemented:
- Modules still need some rethinking and design work
  - I don't have an answer for the diamond dependency problem yet: If two modules we're depending on both incorporate
    the same third module as a dependency, but they depend on slightly different versions, how do we reconcile those
    versions in our code? Related question: can we update the version of one of our transitive dependencies without
    republishing the direct dependency that pulls it in?
  - I have some vague ideas here around API-only modules, which might be needed only in the case where modules are
    reexporting parts of other modules (and not where those modules are used purely for their implementations, though
    those might also be candidates for updates-by-consumer in cases like time zones)
  - How do other languages currently deal with this?
  - This might be unblocked now with the new module approach and reexports
- Lemmas and proofs
  - Needs more consideration of both the predicates we should be operating on (how to reference parts of code?) and syntax
- Normal form
  - Not fully useful yet, other than for transformations; and we may be able to do that part more simply without the full
    normal form
- Recursion transformation
  - Needs something like the normal-form treatment to make function transformations easier, and might also need to be
    combined with other optimizations to be actually useful
  - Probably also needs test cases
  - Tail-call recursion might be easier to try implementing initially?
- Write escape-rope code
  - More String library functions are needed: contains, replaceAll, join, StringBuilder
  - We still need to connect this to the standard library

- There should be a way to easily reference "get a given element of a struct type" as a function binding
  - It also feels like there should be a slightly easier way to do a fully-unbound function reference
- Clean up, organize code and sample Semlang code
  - Make things private when they can be
  - Turn NativeFunctions into library code written in semlang where possible
    - It would also be nice to have this in some .class form in a produced .jar, maybe?
  - Use a code coverage tool for the Kotlin tests
  - Apply Kotlin style guide, and maybe add linting?
  - Add tslint?
- Compiler test: Check for incorrect parameters on follow calls/instance calls
  - Also: args vs. fullyBoundArguments inline function issue seen in TS prior to this commit
- Continue to shrink the set of native functions where possible
- Versioned publication of code corpuses
- Validation-time "requires" checking for extended literals
- Add ability for modules to re-export their imports (probably just specified in the config file for now)
- Have a list somewhere of the exposed methods that are intentionally "API"-ish in the Kotlin code
- Validator: Write more simple positive tests and negative tests
  - Try to squeeze out the obvious possibilities of wrongness
- Backwards-chaining interpreter; performance testing and output comparisons for forward, backward interpreters
  - Write some cases where this should skip actual work, check that it works as expected
- Finish up static validation TODOs
  - Validate struct member names
  - Validate function argument names
  - Make code style more consistent
- Support function bindings of instance constructors and adapter constructors
- List#firstIndex
- Additional primitive-ish types in the standard library (N-bit integers, floating-point numbers, rationals?)
- Other native-y types: Set, UniqueList, Map, Symbol, Snow?
- Error tracking
- Mock tests in other environments
  - Transpiled Java
  - TypeScript interpreter
- There needs to be some way for interpreters/transpilers/compilers to have optional Semlang implementations of native
  thing A in terms of B, thing B in terms of A, etc.
- String library methods
- Add more escaped character options in string literals
- List literals: Don't require parameter type if non-empty
  - (But avoid this in the base language if it looks like we can't avoid subtypes in the future)
  - Support short-form embedded literals when parameter type is present
- DSL for "selecting" expressions from anywhere in a function
  - Point is to establish this before considering add'l characters in variable names
  - Use with Maybe.assert for an "Assertable" annotation? (e.g. for min or max, a list where size is >0)
- Real package/module declarations and use, including "import as" (probably in sem2)
- Typealias
- Code writing into Java
  - We should have some way to specify the exposed API, and check the inputs of these methods for e.g. Natural >= 0
  - Probably put all our code from one module into the same package
- Annotations and multiple function definitions
- Monads (e.g. start with support for console-out)
- Gradle manipulation of Semlang (i.e. beginnings of a build system)
- Real IDE-like editor environment (language server protocol)
- Interactive debugger of functions: drill down into results of subcalls
  - Mark results of specific functions as correct or incorrect for recording tests
  - Set up "normal" interpreter to record the results of specific functions; bridge into this after-the-fact analysis
    - (Record any non-determinism from monads while inside such a call)
- Offer alternative syntax with even easier parsing (e.g. commas prepended to lists, dots prepended to IDs)
  - Ideally this would also be designed to offer single-pass validation like WebAssembly
- Start to create dialects with simpler syntax, type inference, etc.
  - Also type inference for parameters when calling functions, for types that can be inferred (can these be separated somehow?)
  - Operators for dealing more easily with Maybe types (e.g. Foo? instead of Maybe<Foo>, ?: operator, ? for conditional calls)
- Semlang -> Semlang transformations, optimizations, etc.
  - Use only simple (non-nested) expressions
  - Remove redundant variables and reiterated definitions
  - Ground all uses of generics within a program, so a parser can just treat it as an extension of the identifier
  - Turn interface definitions into their constituents
  - Function differentials
  - Compute approximate worst-case computational time of a function, given specific inputs (value is N -> worst-case actual time is O(N))
  - Given a T -> T function, turn it into a T -> Boolean that returns whether the input would be turned into itself
- Port "code writing into Java" to Semlang

Figuring out packages and a module system:
  - I suspect that the JavaScript/npm module system is closer to what we want than the Java system (in its original
    form). Certainly we want the nice property of code exposing a fully controlled API and not its dependencies, as
    well as (related) including multiple
    - Related nice-to-have: Renaming types as they are imported.
  - It's worth researching Cargo here as well, as that system is recent and seems highly respected.
  - It would be nice to allow:
    - Specification of a target library within a source file (with the caveat that we want this in a centralized list
      in most places)
    - Specification of a cryptographic hash whenever we specify a dependency, to require that the version we pull in
      match the hash (for security's sake)
  - I think we want to be able to pull in imports from libraries
  - We'll have to figure out some way to deal with this when exporting to other languages, like Java. That could mean
    e.g. heavy use of shadowing, and/or the Java 9 build system.
  - Mandatory namespacing of e.g. "com.google.guava" or "google:guava" seems better than npm's free-for-all of first-tier
    names
  - Automatic semantic versioning would be awesome, but I don't know what that would look like yet.
    - I took a look at Elm and their version treats "function returns a different value" as a patch change, so I don't
      think that's sufficient (unless programmers are very, very well-behaved).
    - We may want to support multiple different notions of versioning, as well; for example, in some cases, clients will
      depend on the exact behavior of a function remaining fixed over time (eg. I/O formats) while in others, changes in
      behavior may be wanted immediately (e.g. an AI recommender system or time-zone information) even when used as a
      transitive dependency.
So a first pass would look like:
  - Groups of self-contained code are organized as modules, and have dependencies on other modules that by default are
    non-transitive (transitivity could be added later, in the form of re-declarations or otherwise).
  - Distribution/publication of modules online will happen at some point, but currently is TBD. Until then, we should
    probably allow internal repositories on a device (as some other repositories allow). In fact, it may be preferable
    to require use of such an internal repository as an intermediary in both directions (like a git repo). Caching on
    the way in, atomicity of publication (?) on the way out. Regardless of if we take that approach, this increases the
    similarity of formats between the systems.
    - So, we'll want a file format/directory structure for the published modules.
      - Probably at ~/.semlang/repo-1/ or the equivalent thereof, "-1" allowing for a future "-2" format, etc.
  - Code should probably be stored in whatever format is densest and/or most valuable for automated use. Of course, we
    will end up retaining comments (once they become annotations) and the like anyway...
  - We're already using namespacing for *.Adapter and it would make sense for closely related types (as seen in TS), so
    it shouldn't go away entirely, but "package" might be the wrong term now. It should probably be "namespace" and
    reserved for special cases within code, vs. including the org name, module name, etc. as seen in Java.
  - What does testing for this look like?
What a Gradle plugin for this would do:
  - Publish to the internal repository where approriate
  - Possibly allow "linking" of dependencies from peer projects as opposed to the repository
    - Do we want to specify all our dependencies in Gradle, or have a different mechanism to specify them? If the latter,
      is there a problem with Gradle here?
  - Once we know what our dependencies look like, run validation on the project's src/main/semlang and src/test/semlang,
    probably as an "assemble" task
  - As a "test" task, use the interpreter to run and check test annotations in the project
  - The plugin will probably depend on published jars containing the Kotlin parser, validator, and interpreter

Design choices to reconsider:
- Try failure: Include ways to distinguish sources of errors?
  - Stacktraces for debugging are considered outside the semantics of Semlang, and so are not included in the type system.
- Questionable or inconsistent native functions
- Slightly alternative semantics: A function ID is an expression representing a function binding for that function with
  empty bindings; this would simplify "named" vs. "expression" calls, but there would (still) be ambiguities between
  function IDs with no package and variables, and this would have to be sussed out in most transpilations.
- Use dot for follow and forward slash for ID separator? (Probably looks better with imports, worse without)
  - There might be a better version of this with the scope of namespaces more limited
- For Maybe methods, better names than "success" and "failure"; a few options:
  - Present/absent
  - Here/absent
  - One/none
  - Item/none
  - It/no
  - One/not
  - Here/none
- For literals of restricted structs, maybe return a Maybe<T> instead of T and leave the inference of T being valid
  to a proof system

Errors I've made in writing things:
- (2) Used . in place of ->
- Forgot to export something
- (3) Typed "val" instead of "let"
- Forgot the "->value"
- Forgot Try.assume wrapping List.get
- Forgot type parameter of List.append
- Forgot to handle Try from a custom function
- Forgot to write "function" as part of a function definition

Distinctions between possible sem0/sem1/sem2:
- Things that should be applied before whole-program optimization techniques but not when looking at its source code
  - Language features that could be replaced with other things but would make code clunkier in the process:
    - Lambda expressions (replace with bindings of generated "normal" functions)
    - "Shortcut" literals
    - "Import" vs. module namespacing?
    - Default arguments? Named arguments?
    - Always merge all modules into a single module before optimizing/executing
    - Always have full references for entities from other modules (with no module references otherwise)
  - Language features that dialects might offer that standard semlang wouldn't
    - Operator overloading
    - Overloaded function names
    - Default/named arguments
    - Imperative style: Reassignable variables, while/for loops

As things are completed:
- Project Euler
- http://benchmarksgame.alioth.debian.org/

Less important, orthogonal to-dos:
- Clean up Gradle builds
- Consistent naming convention for .kt files
