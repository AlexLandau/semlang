
function applyNTimes(numTimes: Natural, startingValue: Natural, fn: (Natural) -> Natural): Natural {
  let sequence = Sequence<Natural>(startingValue, fn)
  Sequence.get<Natural>(sequence, numTimes)
}

@Test(["0", "1"], "0")
@Test(["1", "0"], "1")
@Test(["1", "1"], "1")
@Test(["1", "2"], "1")
@Test(["2", "0"], "1")
@Test(["2", "1"], "2")
@Test(["2", "2"], "4")
@Test(["2", "3"], "8")
@Test(["3", "0"], "1")
@Test(["3", "1"], "3")
@Test(["3", "2"], "9")
function exponentiateInefficiently(base: Natural, power: Natural): Natural {
  let multiplicand1 = base
  applyNTimes(power, Natural."1", function(multiplicand2: Natural): Natural {
    let addend1 = multiplicand1
    applyNTimes(multiplicand2, Natural."0", function(addend2: Natural): Natural {
      applyNTimes(addend2, addend1, function(toIncrement: Natural): Natural {
        Try.assume<Natural>(Natural(Integer.plus(toIncrement->integer, Integer."1")))
      })
    })
  })
}
