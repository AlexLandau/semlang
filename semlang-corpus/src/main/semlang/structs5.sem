
struct myStuff.Point<T> {
  x: T
  y: T
}

function myStuff.genericFunction<T>(input: myStuff.Point<T>): Integer {
  Integer."1"
}

@Test("['0']: '2'")
@Test("['1']: '6'")
@Test("['2']: '12'")
@Test("['3']: '20'")
function myStuff.myFunction(input: Natural): Integer {
  let 1: Natural = Natural."1"
  let newX: Natural = Natural.plus(input, 1)
  let newY: Natural = Natural.plus(newX, 1)
  let object: myStuff.Point<Natural> = myStuff.Point<Natural>(newX, newY)
  let partialOutput: Natural = Natural.times(object->x, object->y)
  let specificFunction: (myStuff.Point<Natural>) -> Integer = myStuff.genericFunction<Natural>|(_)
  let constantFactor: Integer = specificFunction(object)
  let output: Integer = Integer.times(Integer.fromNatural(partialOutput), constantFactor)
  output
}
