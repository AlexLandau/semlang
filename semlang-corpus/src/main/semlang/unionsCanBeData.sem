// Union with a type parameter
union MyUnion {
  StringOne: Unicode.String
  StringTwo: Unicode.String
  ThingOne
  ThingTwo
}

@Test(["0", "1"], "false")
@Test(["0", "2"], "true")
@Test(["1", "2"], "false")
@Test(["2", "3"], "false")
@Test(["1", "3"], "false")
@Test(["0", "4"], "false")
@Test(["4", "5"], "false")
@Test(["5", "6"], "true")
function testUnionDataEquals(index1: Natural, index2: Natural): Boolean {
  let theValues = [
    MyUnion.StringOne(Unicode.String."hello"),
    MyUnion.StringTwo(Unicode.String."hello"),
    MyUnion.StringOne(Unicode.String."hello"),
    MyUnion.StringTwo(Unicode.String."goodbye"),
    MyUnion.ThingOne(),
    MyUnion.ThingTwo(),
    MyUnion.ThingTwo(),
  ]<MyUnion>
  let item1 = Try.assume<MyUnion>(List.get<MyUnion>(theValues, index1))
  let item2 = Try.assume<MyUnion>(List.get<MyUnion>(theValues, index2))
  Data.equals<MyUnion>(item1, item2)
}
