function myCode.applyThreeTimes<T>(input: T, f: (T) -> T): T {
  f(f(f(input)))
}

@Test(["-1"], "2")
@Test(["2"], "5")
function myCode.addThreeV1(n: Integer): Integer {
  let increment: (Integer) -> Integer = Integer.plus|(_, Integer."1")
  myCode.applyThreeTimes<Integer>(n, increment)
}

@Test(["-1"], "2")
@Test(["2"], "5")
function myCode.addThreeV2(n: Integer): Integer {
  let increment: (Integer) -> Integer = Integer.plus|(Integer."1", _)
  myCode.applyThreeTimes<Integer>(n, increment)
}

@Test(["0"], "3")
@Test(["4"], "7")
function myCode.addThreeV3(n: Natural): Natural {
  let increment: (Natural) -> Natural = Natural.plus|(_, Natural."1")
  myCode.applyThreeTimes<Natural>(n, increment)
}

@Test(["0"], "3")
@Test(["4"], "7")
function myCode.addThreeV4(n: Natural): Natural {
  let increment: (Natural) -> Natural = Natural.plus|(Natural."1", _)
  myCode.applyThreeTimes<Natural>(n, increment)
}
