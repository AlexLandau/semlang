//The prime factors of 13195 are 5, 7, 13 and 29.
//What is the largest prime factor of the number 600851475143 ?

// Opportunities for optimization:
// 1) The recursive getPrimeFactors() method calls getPrimes() at each level of recursion; since it's
//    a constant function, the interpreter could reuse that sequence
// 2) The implementation of isNotDivisibleByAny could short-circuit during the computation of the
//    divisibilities
// 3) When getPrimeFactors recurses, it could pass along a starting point among the primes
//    (this would be hard to infer the correctness of and would be implemented in this code instead)

function euler.getLargestPrimeFactor(n: Natural): Natural {
    let primeFactors: List<Natural> = getPrimeFactors(n)
    let largestPrimeFactor: Natural = Try.assume<Natural>(Natural.max(primeFactors))
    largestPrimeFactor
}

function getPrimeFactors(n: Natural): List<Natural> {
    let primes: SequenceLike<Natural> = getPrimes()
    let firstPrimeDivisor: Natural = primes->first(dividesEvenly|(_, n))
    if (Natural.equals(n, firstPrimeDivisor)) {
        [n]<Natural>
    } else {
        let dividend: Natural = Try.assume<Natural>(Natural.dividedBy(n, firstPrimeDivisor))
        let recursiveFactors: List<Natural> = getPrimeFactors(dividend)
        List.append<Natural>(recursiveFactors, firstPrimeDivisor)
    }
}

// Library candidate for a non-standard library?
function getPrimes(): SequenceLike<Natural> {
    let 2: Natural = Natural."2"
    Sequence.createAccumulating<Natural>(2, getNextPrime|(_))
}

function getNextPrime(allPreviousPrimes: List<Natural>): Natural {
    let lastPrime: Natural = Try.assume<Natural>(List.last<Natural>(allPreviousPrimes))
    let firstCandidate: Natural = Natural.plus(lastPrime, Natural."1")
    let candidates: Sequence<Natural> = Natural.arithmeticProgression(firstCandidate, Natural."1")
    Sequence.first<Natural>(candidates, isNotDivisibleByAny|(_, allPreviousPrimes))
}

function isNotDivisibleByAny(n: Natural, allPreviousPrimes: List<Natural>): Boolean {
    let divisibilities: List<Boolean> = List.map<Natural, Boolean>(allPreviousPrimes, dividesEvenly|(_, n))
    Boolean.not(Boolean.any(divisibilities))
}

function dividesEvenly(denominator: Natural, numerator: Natural): Boolean {
    let remainder: Natural = Try.assume<Natural>(Natural.modulo(numerator, denominator))
    Natural.equals(remainder, Natural."0")
}
